# -*- coding: utf-8 -*-
"""doc_code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IQdWhkSOGCHt6-hrmGji-3vS4nCYLZdy
"""

import streamlit as st
st.write('# Document Summerizer')

from transformers import BartForConditionalGeneration, BartTokenizer
import fitz  # PyMuPDF

# Load BART model and tokenizer
model_name = "facebook/bart-large-cnn"
tokenizer = BartTokenizer.from_pretrained(model_name)
model = BartForConditionalGeneration.from_pretrained(model_name)

# Open the PDF file and extract text
pdf_path = "/content/database19c-wp.pdf"
text = ""
with fitz.open(pdf_path) as pdf_file:
    for page_num in range(len(pdf_file)):
        page = pdf_file[page_num]
        text += page.get_text()

# Get the query input
query = st.text_input("Enter your query: ")

# Tokenize the input separately
document_tokens = tokenizer(text, return_tensors="pt", max_length=1024, truncation=True)
query_tokens = tokenizer(query, return_tensors="pt", max_length=1024, truncation=True)

# Generate the summary using beam search
summary_ids = model.generate(document_tokens["input_ids"], num_beams=4, min_length=30, max_length=200,
                             early_stopping=True, encoder_no_repeat_ngram_size=3,
                             decoder_start_token_id=model.config.eos_token_id,
                             num_return_sequences=4, length_penalty=2.0,
                             top_p=0.95, temperature=0.75)

# Post-process the summaries to select the most coherent and relevant one
best_summary_score = -float("inf")
best_summary = ""

for summary_id in summary_ids:
    summary_text = tokenizer.decode(summary_id, skip_special_tokens=True)
    # Compute a simple score based on the presence of query terms in the summary
    score = sum(1 for term in query.lower().split() if term in summary_text.lower())
    # Update the best summary if the current one has a higher score
    if score > best_summary_score:
        best_summary_score = score
        best_summary = summary_text

# Print the best summary
st.write("Summary:", best_summary)